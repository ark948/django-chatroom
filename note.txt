people can join, start chatting with each other.
and chat with support (which requires user roles)
and maybe a blog with markdown support


1. project setup:
    > python -m venv venv
    > venv/Scripts/activate
    > mkdir backend
    > pip install django
    > django-admin startproject core backend
    > python backend/manage.py runserver




2. project setup (continue)
    > pip install environs[django]
    > in settings.py initialize env
    > add .env (basedir is the parent of backend folder)
    to generate secure random string for SECRET_KEY:
    open python shell:
        import secrets
        secrets.urlsafe_token(38) (or provide another length)

    (3 environment vars are needed)
    debug, secret_key and db url
    > pip install dj-database-url



3. adding custom user model and authentication
    create model (i added email unique field, so later we can add email only login)
    (using django-allauth or custom authentication backend)
    add forms
    update admin
    create migrations
    > python backend/manage.py makemigrations accounts
    > python backend/manage.py migrate
    > python backend/manage.py createsuperuser

    let's try making them async (nope, requires a lot more work)


4. adding pytest-django (for testing with pytest)
    > pip install pytest-django
    add a pytest.ini to backend folder


5. adding profile model in accounts app (on hold)
    problem detected: upon creating new user from admin panel
    our custom user model is wrong.
    attempting to rebuild it...
    (simpley delete the migration file, and the sqlite db file)
    ok


6. adding blog app with markdown:
    > pip install django-markdownx
    add to installed apps
    add to blog/urls.py (not sure it should be there)
    this requires static files to be configured
    skipping running collectstatic for now,
    


7. configuring static files
    during development, django automatically serves static files. (not suitable for production at all)
    it will look for static folder within each app, also not good.
    we should create a project-level static folder similar approach to templates.
    > mkdir static (needs to be next to manage.py)
    inside it add a base.css file 
    all static files will be served as the following example:
    http://127.0.0.1:8000/static/base.css
    add static tag to base html template, and the static template tag with proper link
    

    












superuser:
user01@gmail.com
123


user04
user04@gmail.com
test123*A