people can join, start chatting with each other.
and chat with support (which requires user roles)
and maybe a blog with markdown support


1. project setup:
    > python -m venv venv
    > venv/Scripts/activate
    > mkdir backend
    > pip install django
    > django-admin startproject core backend
    > python backend/manage.py runserver




2. project setup (continue)
    > pip install environs[django]
    > in settings.py initialize env
    > add .env (basedir is the parent of backend folder)
    to generate secure random string for SECRET_KEY:
    open python shell:
        import secrets
        secrets.urlsafe_token(38) (or provide another length)

    (3 environment vars are needed)
    debug, secret_key and db url
    > pip install dj-database-url



3. adding custom user model and authentication
    create model (i added email unique field, so later we can add email only login)
    (using django-allauth or custom authentication backend)
    add forms
    update admin
    create migrations
    > python backend/manage.py makemigrations accounts
    > python backend/manage.py migrate
    > python backend/manage.py createsuperuser

    let's try making them async (nope, requires a lot more work)


4. adding pytest-django (for testing with pytest)
    > pip install pytest-django
    add a pytest.ini to backend folder


5. adding profile model in accounts app (on hold)
    problem detected: upon creating new user from admin panel
    our custom user model is wrong.
    attempting to rebuild it...
    (simpley delete the migration file, and the sqlite db file)
    ok


6. adding blog app with markdown:
    approach 1:
    > pip install django-markdownx
    add to installed apps
    add to blog/urls.py (not sure it should be there)
    this requires static files to be configured
    skipping running collectstatic for now,

    approach 2:
    using django-summernote
    add to installed apps
    need to configure image uploads (media folder)
    run migration
    result: not bad, but requires internet to laod the editor

    approach 3:
    using django-ckeditor (ckeditor 4 will be installed)
    > pip install django-ckeditor
    add 'ckeditor' to installed apps
    run collectstatic command again
    specify CKEDITOR_BASEPATH (it must point to collected static files ckeditor folder)
    result: FAILED
    during runserver command, a warning from this package raises some deprecated issues, also was unable to display the widget

    approach 4:
    using django-ckeditor-5
    result: OK
    i will continue later with other features such as image upload and stuff


    


7. configuring static files
    during development, django automatically serves static files. (not suitable for production at all)
    it will look for static folder within each app, also not good.
    we should create a project-level static folder similar approach to templates.
    > mkdir static (needs to be next to manage.py)
    inside it add a base.css file 
    all static files will be served as the following example:
    http://127.0.0.1:8000/static/base.css
    add static tag to base html template, and the static template tag with proper link
    add STATIC_ROOT to settings.py
    > python backend/manage.py collectstatic
    


8. adding chat functionality
    > pip install channels
    > pip install daphne
    add to settings.py
    (daphne must come before statifiles and channels)
    (channels should come at the bottom)
    (also project needs to switch to ASGI)
    add ASGI_APPLICATION to settings.py (this file should point to asgi.py from the core)
    run server to see if it works
    add chat app to top of the installed_apps
    add CHANNEL_LAYERS to settings.py (this is actually the message broker, in production env, Redis is a better choice)
    add chat urls
    add template folder for chat app
    add view
    make and run migrations (only required because the tutorial was starting a fresh project)
    add consumer.py to chat app (this is direclty related to websockets)
    add routing.py to chat app (similar to urls.py, just differnt convention)
    edit project/asgi.py
    at this point, superuser must be created (if not)
    


9. adding rest api token authentication + Redis (to check blocklisted tokens)
    new app: accounts_api
    we can use the DRF's own builtin Token or third party
    add rest_framework authentication config to settings.py
    


10. new feature:
    users (students) can upload pdf, img, text, word files
    table relation: each can user can have many files (one to many)
    

11. internationalization and localization
    contains:
    translation of texts
    formatting dates, times, numbers and time zones

    translation:
        translation hooks are added to various parts of the project that require translation (usually strings)
        django extracts these translation strings to message files.
        translators will provide translation in these message files.
        GNU gettext will compile these files.

        add django.middleware.locale.LocaleMiddleware to middlewares after session middleware and before common middleware
        import gettext from django.utils.translation and add it to differnt parts of the project (i added it to a test view in home app)
        next step is to create message files for a new language (locale names e.g. fa)
        




superuser:
user01@gmail.com
123


user02@gmail.com
test123*A




blog: features:
crud on blog posts
like/dislike a post
comment on post